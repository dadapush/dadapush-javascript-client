/**
 * DaDaPush Public API
 * DaDaPush: Real-time Notifications App Send real-time notifications through our API without coding and maintaining your own app for iOS or Android devices.
 *
 * The version of the OpenAPI document: v1
 * Contact: contacts@dadapush.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MessagePushRequest from '../model/MessagePushRequest';
import Result from '../model/Result';
import ResultOfMessageObject from '../model/ResultOfMessageObject';
import ResultOfMessagePushResponse from '../model/ResultOfMessagePushResponse';
import ResultOfPageResponseOfMessageObject from '../model/ResultOfPageResponseOfMessageObject';

/**
* DaDaPushMessage service.
* @module api/DaDaPushMessageApi
* @version 1.0.0
*/
export default class DaDaPushMessageApi {

    /**
    * Constructs a new DaDaPushMessageApi. 
    * @alias module:api/DaDaPushMessageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createMessage operation.
     * @callback module:api/DaDaPushMessageApi~createMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultOfMessagePushResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * push Message to a Channel
     * <h2>Rate Limit:</h2><ul><li>1 request per 1s</li><li>30 request per 1m</li><li>500 request per 1h</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>
     * @param {module:model/MessagePushRequest} body body
     * @param {String} channelToken see: https://www.dadapush.com/channel/list
     * @param {module:api/DaDaPushMessageApi~createMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultOfMessagePushResponse}
     */
    createMessage(body, channelToken, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createMessage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'x-channel-token': channelToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResultOfMessagePushResponse;
      return this.apiClient.callApi(
        '/api/v1/message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMessage operation.
     * @callback module:api/DaDaPushMessageApi~deleteMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Result} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a Channel Message
     * <h2>Rate Limit:</h2><ul><li>10 request per 1s</li><li>100 request per 1m</li><li>1000 request per 1h</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>
     * @param {Number} messageId messageId
     * @param {String} channelToken see: https://www.dadapush.com/channel/list
     * @param {module:api/DaDaPushMessageApi~deleteMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Result}
     */
    deleteMessage(messageId, channelToken, callback) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling deleteMessage");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-channel-token': channelToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/api/v1/message/{messageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessage operation.
     * @callback module:api/DaDaPushMessageApi~getMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultOfMessageObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get a Channel Message
     * <h2>Rate Limit:</h2><ul><li>10 request per 1s</li><li>100 request per 1m</li><li>1000 request per 1h</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>
     * @param {Number} messageId messageId
     * @param {String} channelToken see: https://www.dadapush.com/channel/list
     * @param {module:api/DaDaPushMessageApi~getMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultOfMessageObject}
     */
    getMessage(messageId, channelToken, callback) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling getMessage");
      }
      if (channelToken === undefined || channelToken === null) {
        throw new Error("Missing the required parameter 'channelToken' when calling getMessage");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
        'x-channel-token': channelToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResultOfMessageObject;
      return this.apiClient.callApi(
        '/api/v1/message/{messageId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessages operation.
     * @callback module:api/DaDaPushMessageApi~getMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResultOfPageResponseOfMessageObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get Message List
     * <h2>Rate Limit:</h2><ul><li>1 request per 1s</li><li>45 request per 1m</li></ul><h2>Result code/errmsg List:</h2><ul><li>0: ok</li><li>1: server error</li><li>101: channel is exists</li><li>102: channel is not exists</li><li>103: channel token error</li><li>104: channel is not exists</li><li>105: message is not exists</li><li>204: bad request</li><li>205: permission deny</li><li>206: too many request, please after 5 minutes to try!</li><li>301: duplicate username/email</li><li>302: user is not exists</li><li>303: user password is error</li><li>304: client push token is error</li><li>305: user is disabled</li><li>306: your subscription is expired</li><li>307: user not subscribe channel</li></ul>
     * @param {Number} page greater than 1
     * @param {Number} pageSize range is 1,50
     * @param {String} channelToken see: https://www.dadapush.com/channel/list
     * @param {module:api/DaDaPushMessageApi~getMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResultOfPageResponseOfMessageObject}
     */
    getMessages(page, pageSize, channelToken, callback) {
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getMessages");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling getMessages");
      }
      if (channelToken === undefined || channelToken === null) {
        throw new Error("Missing the required parameter 'channelToken' when calling getMessages");
      }

      let pathParams = {
      };
      let queryParams = {
        'page': page,
        'pageSize': pageSize
      };
      let headerParams = {
        'x-channel-token': channelToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResultOfPageResponseOfMessageObject;
      return this.apiClient.callApi(
        '/api/v1/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
