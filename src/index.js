/**
 * DaDaPush Public API
 * DaDaPush: Real-time Notifications App Send real-time notifications through our API without coding and maintaining your own app for iOS or Android devices.
 *
 * The version of the OpenAPI document: v1
 * Contact: contacts@dadapush.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Action from './model/Action';
import MessageObject from './model/MessageObject';
import MessagePushRequest from './model/MessagePushRequest';
import MessagePushResponse from './model/MessagePushResponse';
import PageResponseOfMessageObject from './model/PageResponseOfMessageObject';
import Result from './model/Result';
import ResultOfMessageObject from './model/ResultOfMessageObject';
import ResultOfMessagePushResponse from './model/ResultOfMessagePushResponse';
import ResultOfPageResponseOfMessageObject from './model/ResultOfPageResponseOfMessageObject';
import DaDaPushMessageApi from './api/DaDaPushMessageApi';


/**
* DaDaPush_Real_time_Notifications_AppSend_real_time_notifications_through_our_API_without_coding_and_maintaining_your_own_app_for_iOS_or_Android_devices_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DadapushClient = require('index'); // See note below*.
* var xxxSvc = new DadapushClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DadapushClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DadapushClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DadapushClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Action model constructor.
     * @property {module:model/Action}
     */
    Action,

    /**
     * The MessageObject model constructor.
     * @property {module:model/MessageObject}
     */
    MessageObject,

    /**
     * The MessagePushRequest model constructor.
     * @property {module:model/MessagePushRequest}
     */
    MessagePushRequest,

    /**
     * The MessagePushResponse model constructor.
     * @property {module:model/MessagePushResponse}
     */
    MessagePushResponse,

    /**
     * The PageResponseOfMessageObject model constructor.
     * @property {module:model/PageResponseOfMessageObject}
     */
    PageResponseOfMessageObject,

    /**
     * The Result model constructor.
     * @property {module:model/Result}
     */
    Result,

    /**
     * The ResultOfMessageObject model constructor.
     * @property {module:model/ResultOfMessageObject}
     */
    ResultOfMessageObject,

    /**
     * The ResultOfMessagePushResponse model constructor.
     * @property {module:model/ResultOfMessagePushResponse}
     */
    ResultOfMessagePushResponse,

    /**
     * The ResultOfPageResponseOfMessageObject model constructor.
     * @property {module:model/ResultOfPageResponseOfMessageObject}
     */
    ResultOfPageResponseOfMessageObject,

    /**
    * The DaDaPushMessageApi service constructor.
    * @property {module:api/DaDaPushMessageApi}
    */
    DaDaPushMessageApi
};
